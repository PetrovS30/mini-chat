const express = require('express'); 
const http = require('http'); 
const { Server } = require('socket.io');

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express(); 
const server = http.createServer(app);
const io = new Server(server); 

app.use(express.static('public'));

function logRoomsState() {
    Object.entries(rooms).forEach(([roomName, roomData]) => {
        smartLog(`üì¶ –ö–æ–º–Ω–∞—Ç–∞: ${roomName}`);
        smartLog(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${roomData.members.join(', ') || '‚Äî'}`);
        smartLog(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${roomData.conversation.length}`);
    });
}
/* setInterval(() => {
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    logRoomsState();
}, 7000);  */


const rooms = {
    boys : {
        conversation : [
            {id : 1 , nickname : 'Maxim', message: '–∑–¥–æ—Ä–æ–≤–∞ —Ä–µ–±—è—Ç–∞', timestamp: '2025-09-03T11:56:00'},
            {id : 2 , nickname : 'Serg', message: '–ø—Ä–∏–≤–µ—Ç –ú–∞–∫—Å', timestamp: '2025-09-03T11:56:44'},
        ],
        members : ['Maxim', "Serg"]
    },
    girls : {
        conversation : [
            {id : 1 , nickname : 'Anna', message: '–ø—Ä–∏–≤–µ—Ç–∏–∫ –¥–µ–≤–æ—á–∫–∏', timestamp: '2025-09-03T11:56:00'},
            {id : 2 , nickname : 'Sofia', message: '–ø—Ä–∏–≤–µ—Ç–∏ –ê–Ω—è', timestamp: '2025-09-03T11:56:44'},
        ],
        members : ['Anna', "Sofia"]
    },
    general: {
        conversation : [
            {id : 1 , nickname : 'Rita', message: '–í—Å–µ–º –ø–æ –ø—Ä–∏–≤–µ—Ç—É', timestamp: '2025-09-03T11:56:00'},
            {id : 2 , nickname : 'Lena', message: '–•–µ–ª–æ—É', timestamp: '2025-09-03T11:56:44'},
        ],
        members : ['Rita', "Lena"]
    }
};




function smartLog(...args) {
    const stack = new Error().stack.split('\n')[2];
    const location = stack.match(/\((.*)\)/)?.[1] || stack;
    console.log(`[${location}]`, ...args);
}

io.on('connection', (socket) => {
    /* smartLog("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:", socket.id); */

    socket.onAny((event, payload) => {
        smartLog(` ${socket.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ: ${event}`);
    });

    socket.on("joinRoomRequest", ({ nickname, room }) => {
        const currentRoom = rooms[room];

        if (!currentRoom) {
            socket.emit('errorMessage', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        if (currentRoom.members.includes(nickname)) {
            socket.emit('nicknameError', '–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç');
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç client.js
        socket.emit('roomJoinConfirmed', {
            room,
            nickname
        });
    
    });

    socket.on('newUserJoinedRoom', ({nickname, room}) => {
        smartLog('üì• join2Room –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', nickname, room);

        if(!nickname || !room ) {
            socket.emit('redirectToHome');
            return;
        }

        const currentRoom = rooms[room];
        if (!currentRoom) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        if (!currentRoom.members.includes(nickname)) {
            currentRoom.members.push(nickname);
        }

        socket.nickname = nickname;
        socket.room = room;
        socket.join(room);

        let eventName;

        if (room === 'boys') {
            eventName = 'boysRoom';
        } else if (room === 'girls') {
            eventName = 'girlsRoom';
        } else if (room === 'general') {
            eventName = 'generalRoom';
        }

        if (eventName) {
            io.to(room).emit(eventName, {
                conversation: currentRoom.conversation,
                members: currentRoom.members
            });
        }

        smartLog(`‚úÖ ${nickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${room}`);
    });

    socket.on('send-conversation', (sendMessage) => {
        console.log(sendMessage);
        const {room, message, nickname} = sendMessage;


        if(!nickname  || !message || !room) {
            socket.emit('redirectToHome');
            return;
        }

        if(sendMessage) {
            const newId = rooms[room].conversation.length + 1;

            const messageWithId = {
                id: newId,
                ...sendMessage,
                newMsgNickname: rooms[room].members
            };

            rooms[room].conversation.push(messageWithId);

            io.to(room).emit('newMessage', messageWithId);

            console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ newMessage:', messageWithId);
        }
    });

    //girls


    socket.on('disconnect', () => {
        const { nickname, room } = socket;
        if (nickname && room && rooms[room]) {
            rooms[room].members = rooms[room].members.filter(name => name !== nickname);
            io.to(room).emit('boysRoom', {
                boysMessage: rooms[room].conversation,
                boysMembers: rooms[room].members
            });
            smartLog(`‚ùå ${nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏ —É–¥–∞–ª—ë–Ω –∏–∑ ${room}`);
        }
    });

});

    console.log('----------------------------------------------------------');


server.listen(3000, () => {
    console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
});


